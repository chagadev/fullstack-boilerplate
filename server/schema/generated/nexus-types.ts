/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import { Context } from "@server/backend/context";
import { FieldShieldResolver, ObjectTypeShieldResolver } from "nexus-shield";
import { core } from "nexus";
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `Upload` scalar type represents a file upload.
     */
    upload<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>,
    ): void; // "Upload";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `Upload` scalar type represents a file upload.
     */
    upload<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void; // "Upload";
  }
}
declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, "crud">;
    model: NexusPrisma<TypeName, "model">;
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  EnumRoleFieldUpdateOperationsInput: {
    // input type
    set?: NexusGenEnums["Role"] | null; // Role
  };
  StringFieldUpdateOperationsInput: {
    // input type
    set?: string | null; // String
  };
  UserCreateInput: {
    // input type
    email: string; // String!
    password: string; // String!
    role?: NexusGenEnums["Role"] | null; // Role
  };
  UserUpdateInput: {
    // input type
    email?: NexusGenInputs["StringFieldUpdateOperationsInput"] | null; // StringFieldUpdateOperationsInput
    password?: NexusGenInputs["StringFieldUpdateOperationsInput"] | null; // StringFieldUpdateOperationsInput
    role?: NexusGenInputs["EnumRoleFieldUpdateOperationsInput"] | null; // EnumRoleFieldUpdateOperationsInput
  };
  UserWhereUniqueInput: {
    // input type
    email?: string | null; // String
    id?: number | null; // Int
  };
}

export interface NexusGenEnums {
  Role: "ADMIN" | "EDITOR" | "USER";
}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  Upload: any;
}

export interface NexusGenObjects {
  Mutation: {};
  Query: {};
  Subscription: {};
  User: {
    // root type
    email?: string | null; // String
    id?: number | null; // Int
    role?: NexusGenEnums["Role"] | null; // Role
  };
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenObjects;

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums;

export interface NexusGenFieldTypes {
  Mutation: {
    // field return type
    createOneUser: NexusGenRootTypes["User"] | null; // User
    deleteOneUser: NexusGenRootTypes["User"] | null; // User
    ping: string | null; // String
    updateOneUser: NexusGenRootTypes["User"] | null; // User
  };
  Query: {
    // field return type
    hello: string; // String!
    user: NexusGenRootTypes["User"] | null; // User
    users: NexusGenRootTypes["User"][]; // [User!]!
  };
  Subscription: {
    // field return type
    ping: string | null; // String
  };
  User: {
    // field return type
    email: string | null; // String
    id: number | null; // Int
    role: NexusGenEnums["Role"] | null; // Role
  };
}

export interface NexusGenFieldTypeNames {
  Mutation: {
    // field return type name
    createOneUser: "User";
    deleteOneUser: "User";
    ping: "String";
    updateOneUser: "User";
  };
  Query: {
    // field return type name
    hello: "String";
    user: "User";
    users: "User";
  };
  Subscription: {
    // field return type name
    ping: "String";
  };
  User: {
    // field return type name
    email: "String";
    id: "Int";
    role: "Role";
  };
}

export interface NexusGenArgTypes {
  Mutation: {
    createOneUser: {
      // args
      data: NexusGenInputs["UserCreateInput"]; // UserCreateInput!
    };
    deleteOneUser: {
      // args
      where: NexusGenInputs["UserWhereUniqueInput"]; // UserWhereUniqueInput!
    };
    updateOneUser: {
      // args
      data: NexusGenInputs["UserUpdateInput"]; // UserUpdateInput!
      where: NexusGenInputs["UserWhereUniqueInput"]; // UserWhereUniqueInput!
    };
  };
  Query: {
    user: {
      // args
      where: NexusGenInputs["UserWhereUniqueInput"]; // UserWhereUniqueInput!
    };
    users: {
      // args
      after?: NexusGenInputs["UserWhereUniqueInput"] | null; // UserWhereUniqueInput
      before?: NexusGenInputs["UserWhereUniqueInput"] | null; // UserWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    };
  };
}

export interface NexusGenAbstractTypeMembers {}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false;
    resolveType: true;
    __typename: false;
  };
};

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes["inputNames"] | NexusGenTypes["enumNames"] | NexusGenTypes["scalarNames"];
  allOutputTypes:
    | NexusGenTypes["objectNames"]
    | NexusGenTypes["enumNames"]
    | NexusGenTypes["unionNames"]
    | NexusGenTypes["interfaceNames"]
    | NexusGenTypes["scalarNames"];
  allNamedTypes: NexusGenTypes["allInputTypes"] | NexusGenTypes["allOutputTypes"];
  abstractTypes: NexusGenTypes["interfaceNames"] | NexusGenTypes["unionNames"];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    /**
     * Default authorization rule to execute on all fields of this object
     */
    shield?: ObjectTypeShieldResolver<TypeName>;
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization rule to execute for this field
     */
    shield?: FieldShieldResolver<TypeName, FieldName>;
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
